document.addEventListener("DOMContentLoaded", () => {
    const container = document.querySelector("#eventstable");
    if (!container) return;

    container.innerHTML = ""; // –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

    // -------------------------
    // 1) –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö –∏–∑ users (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –µ—Å—Ç—å)
    // -------------------------
    const eventsMap = {};
    for (const userId in users) {
        const user = users[userId];
        (user.events || []).forEach(eventId => {
            if (!eventsMap[eventId]) {
                eventsMap[eventId] = { players: [], awards: {} };
            }
            eventsMap[eventId].players.push(user.gamename || user.id);

            (user.awards || []).forEach(awardId => {
                const award = awards && awards[awardId];
                if (award && award.event === eventId) {
                    if (!eventsMap[eventId].awards[awardId]) {
                        eventsMap[eventId].awards[awardId] = { award, players: [] };
                    }
                    eventsMap[eventId].awards[awardId].players.push(user.gamename || user.id);
                }
            });
        });
    }

    // -------------------------
    // 2) –ü–∞—Ä—Å–µ—Ä –¥–∞—Ç -> –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Date (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏) –∏–ª–∏ null
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: DD.MM.YYYY, DD.MM.YY, YYYY-MM-DD –∏ ISO-–ø–æ–¥–æ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    // -------------------------
    function parseDateToDateObject(str) {
        if (!str) return null;
        str = String(str).trim();

        // DD.MM.YYYY –∏–ª–∏ DD.MM.YY
        let m = str.match(/^(\d{1,2})\.(\d{1,2})\.(\d{2,4})$/);
        if (m) {
            let day = parseInt(m[1], 10);
            let month = parseInt(m[2], 10);
            let year = parseInt(m[3], 10);
            if (year < 100) {
                // 2-digit year: 00-69 -> 2000-2069, 70-99 -> 1970-1999
                year += (year >= 70 ? 1900 : 2000);
            }
            const d = new Date(year, month - 1, day);
            if (!isNaN(d)) return new Date(d.getFullYear(), d.getMonth(), d.getDate());
            return null;
        }

        // YYYY-MM-DD
        m = str.match(/^(\d{4})-(\d{1,2})-(\d{1,2})$/);
        if (m) {
            const year = parseInt(m[1], 10);
            const month = parseInt(m[2], 10);
            const day = parseInt(m[3], 10);
            const d = new Date(year, month - 1, day);
            if (!isNaN(d)) return new Date(d.getFullYear(), d.getMonth(), d.getDate());
            return null;
        }

        // –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ (ISO –∏ —Ç.–ø.)
        const dt = new Date(str);
        if (!isNaN(dt)) return new Date(dt.getFullYear(), dt.getMonth(), dt.getDate());

        return null;
    }

    // —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è DD.MM.YYYY
    function formatDateDDMMYYYY(dateObj) {
        if (!dateObj) return "";
        const dd = String(dateObj.getDate()).padStart(2, "0");
        const mm = String(dateObj.getMonth() + 1).padStart(2, "0");
        const yyyy = String(dateObj.getFullYear());
        return `${dd}.${mm}.${yyyy}`;
    }

    // isPast: true –µ—Å–ª–∏ –¥–∞—Ç–∞ —Å—Ç—Ä–æ–≥–æ –º–µ–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
    function isPast(dateObj) {
        if (!dateObj) return false;
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        return dateObj.getTime() < today.getTime();
    }

    // -------------------------
    // 3) –°—Ç—Ä–æ–∏–º eventsArray –ü–û –í–°–ï–ú —Å–æ–±—ã—Ç–∏—è–º (–Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –≥–¥–µ –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏)
    // -------------------------
    const eventsArray = Object.keys(events).map(eventId => {
        const info = events[eventId] || {};
        const mapData = eventsMap[eventId] || { players: [], awards: {} };
        const parsedDate = parseDateToDateObject(info.date); // Date –∏–ª–∏ null
        return {
            eventId,
            data: mapData,
            info,
            dateObj: parsedDate
        };
    });

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ / –±—É–¥—É—â–∏–µ
    const pastEvents = [];
    const futureEvents = [];
    eventsArray.forEach(e => {
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã ‚Äî –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å.
        // –°–µ–π—á–∞—Å: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –¥–∞—Ç—ã
        if (!e.dateObj) return;
        if (isPast(e.dateObj)) {
            pastEvents.push(e);
        } else {
            futureEvents.push(e);
        }
    });

    // -------------------------
    // 4) –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    // –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –±—É–¥—É—â–∏–µ –Ω–∞–¥ –ø—Ä–æ—à–µ–¥—à–∏–º–∏, –∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤—ã—à–µ.
    // –ó–Ω–∞—á–∏—Ç: —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–∞—Ç—ã (b - a)
    // -------------------------
    pastEvents.sort((a, b) => b.dateObj.getTime() - a.dateObj.getTime());
    futureEvents.sort((a, b) => b.dateObj.getTime() - a.dateObj.getTime());

    // -------------------------
    // 5) –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è
    // -------------------------
    function createCard({ eventId, data, info, dateObj }, time) {
        const card = document.createElement("div");
        card.className = "event-card";
        if (info.img) card.style.backgroundImage = `url("img/events/${info.img}")`;
        card.style.backgroundSize = "cover";
        card.style.backgroundPosition = "center";
        card.style.borderRadius = "0.4rem";
        card.style.padding = "1rem";
        card.style.marginBottom = "1rem";
        card.style.color = "#fff";
        card.style.boxShadow = "0 2px 8px rgba(0,0,0,0.4)";
        if (time === 'future') card.style.border = "5px solid #939347"; // –∂–µ–ª—Ç–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π

        const overlay = document.createElement("div");
        // –∑–∞—Ç–µ–º–Ω—è—é—â–∏–π —Ñ–æ–Ω, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç —á–∏—Ç–∞–ª—Å—è –Ω–∞ —è—Ä–∫–æ–º —Ñ–æ–Ω–µ
        // overlay.style.background = "rgba(0,0,0,0.45)";
        overlay.style.padding = "0.5rem";
        overlay.style.borderRadius = "0.6rem";

        const title = document.createElement("h2");
        title.textContent = info.name || eventId;
        overlay.appendChild(title);

        const date = document.createElement("p");
        date.textContent = info.date || formatDateDDMMYYYY(dateObj) || "";
        overlay.appendChild(date);

        const players = document.createElement("p");
        players.textContent = "Players: " + (data.players.length ? data.players.join(", ") : "-");
        overlay.appendChild(players);

        const medals = document.createElement("div");
        medals.style.display = "flex";
        medals.style.gap = "8px";
        medals.style.marginTop = "0.5rem";

        for (const awardId in data.awards) {
            const obj = data.awards[awardId];
            const img = document.createElement("img");
            img.src = "img/award/" + (obj.award.img || "noimg.png");
            img.alt = obj.award.name || "";
            img.title = obj.award.name || "";
            img.style.width = "32px";
            img.style.height = "32px";
            img.style.cursor = "pointer";

            img.onclick = () => {
                alert(`üèÖ ${obj.award.name}\n–ü–æ–ª—É—á–∏–ª–∏: ${obj.players.join(", ")}`);
            };

            medals.appendChild(img);
        }

        overlay.appendChild(medals);
        card.appendChild(overlay);
        return card;
    }

    // -------------------------
    // 6) –†–µ–Ω–¥–µ—Ä: —Å–Ω–∞—á–∞–ª–∞ –±—É–¥—É—â–∏–µ, –∑–∞—Ç–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –∑–∞—Ç–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ
    // -------------------------
    // –±—É–¥—É—â–µ–µ
    if (futureEvents.length) {
        /*const futureTitle = document.createElement("h3");
        futureTitle.textContent = "–ë—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:";
        futureTitle.style.margin = "0.5rem 0 1rem 0";
        container.appendChild(futureTitle);*/

        futureEvents.forEach(e => container.appendChild(createCard(e, 'future')));
    }

    // —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ —Ç–µ, –∏ –¥—Ä—É–≥–∏–µ)
    if (pastEvents.length && futureEvents.length) {
        const divider = document.createElement("div");
        divider.innerHTML = `
            <div style="padding: 1rem; margin: 1rem 0; background: #333; color: #fff; text-align: center; border-radius: 0.5rem;">
                üåü Here will be advertising of <a href="https://eeditor-ws.github.io/">EEditor - best scenario editor for Warnament</a> üåü
                <br>
                <br>
                üåü –¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∫–ª–∞–º–∞ <a href="https://eeditor-ws.github.io/">EEditor'–∞ - –ª—É—á—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è Warnament</a> üåü
            </div>
        `;
        container.appendChild(divider);
    }

    // –ø—Ä–æ—à–µ–¥—à–∏–µ
    if (pastEvents.length) {
        const pastTitle = document.createElement("h3");
        /*pastTitle.textContent = "–ü—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è:";
        pastTitle.style.margin = "1rem 0 0.5rem 0";
        container.appendChild(pastTitle);*/

        pastEvents.forEach(e => container.appendChild(createCard(e)));
    }

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    // console.log('–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π (events):', Object.keys(events).length);
    // console.log('–°–æ–±—ã—Ç–∏–π —Å –∏–≥—Ä–æ–∫–∞–º–∏ (eventsMap):', Object.keys(eventsMap).length);
    // console.log('–ë—É–¥—É—â–∏–µ:', futureEvents.map(e => ({ id: e.eventId, date: formatDateDDMMYYYY(e.dateObj) })));
    // console.log('–ü—Ä–æ—à–µ–¥—à–∏–µ:', pastEvents.map(e => ({ id: e.eventId, date: formatDateDDMMYYYY(e.dateObj) })));
});
